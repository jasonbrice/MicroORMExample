<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroLite</name>
    </assembly>
    <members>
        <member name="T:MicroLite.Configuration.ConfigurationExtensions">
            <summary>
            Extensions for the MicroLite configuration.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.WithAttributeBasedMapping(MicroLite.Configuration.IConfigureExtensions)">
            <summary>
            Configures the MicroLite ORM Framework to use the default attribute based mapping.
            </summary>
            <param name="configureExtensions">The interface to configure extensions.</param>
            <returns>The configure extensions.</returns>
        </member>
        <member name="M:MicroLite.Configuration.ConfigurationExtensions.WithConventionBasedMapping(MicroLite.Configuration.IConfigureExtensions,MicroLite.Mapping.ConventionMappingSettings)">
            <summary>
            Configures the MicroLite ORM Framework to use convention based mapping instead of the default
            attribute based mapping.
            </summary>
            <param name="configureExtensions">The interface to configure extensions.</param>
            <param name="settings">The settings for the convention mapping.</param>
            <returns>The configure extensions.</returns>
        </member>
        <member name="T:MicroLite.Configuration.FluentConfiguration">
            <summary>
            The class used to configure the MicroLite ORM framework using the fluent API.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.IConfigureConnection">
            <summary>
            The interface which specifies the options for configuring the connection in the fluent configuration
            of the MicroLite ORM framework.
            </summary>
        </member>
        <member name="T:MicroLite.IHideObjectMethods">
            <summary>
            An interface used to hide the 4 System.Object instance methods from the API in Visual Studio intellisense.
            </summary>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.GetType">
            <summary>
            Gets the type.
            </summary>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:MicroLite.IHideObjectMethods.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureConnection.ForConnection(System.String)">
            <summary>
            Specifies the name of the connection string in the app config to be used.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionName is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the connection is not found in the app config.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the provider name is not supported.</exception>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureConnection.ForConnection(System.String,System.String)">
            <summary>
            Specifies the name of the connection string in the app config and the sql dialect to be used.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <param name="sqlDialect">The name of the sql dialect to use for the connection.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionName is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the connection is not found in the app config.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the provider name or sql dialect is not supported.</exception>
        </member>
        <member name="T:MicroLite.Configuration.ICreateSessionFactory">
            <summary>
            The interface which specifies the creation of the <see cref="T:MicroLite.ISessionFactory"/> in the fluent configuration
            of the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.ICreateSessionFactory.CreateSessionFactory">
            <summary>
            Creates the session factory for the configured connection.
            </summary>
            <returns>The session factory for the specified connection.</returns>
        </member>
        <member name="M:MicroLite.Configuration.FluentConfiguration.CreateSessionFactory">
            <summary>
            Creates the session factory for the configured connection.
            </summary>
            <returns>
            The session factory for the specified connection.
            </returns>
        </member>
        <member name="M:MicroLite.Configuration.FluentConfiguration.ForConnection(System.String)">
            <summary>
            Specifies the named connection string in the app config to be used with the default MsSqlDialect.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <returns>
            The next step in the fluent configuration.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionName is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the connection is not found in the app config.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the provider name is not supported.</exception>
        </member>
        <member name="M:MicroLite.Configuration.FluentConfiguration.ForConnection(System.String,System.String)">
            <summary>
            Specifies the name of the connection string in the app config and the sql dialect to be used.
            </summary>
            <param name="connectionName">The name of the connection string in the app config.</param>
            <param name="sqlDialect">The name of the sql dialect to use for the connection.</param>
            <returns>The next step in the fluent configuration.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionName is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the connection is not found in the app config.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if the provider name or sql dialect is not supported.</exception>
        </member>
        <member name="T:MicroLite.Core.AdoTransaction">
            <summary>
            The an implementation of <see cref="T:MicroLite.ITransaction"/> which manages an ADO transaction.
            </summary>
        </member>
        <member name="T:MicroLite.ITransaction">
            <summary>
            The interface for a database transaction.
            </summary>
        </member>
        <member name="M:MicroLite.ITransaction.Commit">
            <summary>
            Commits the transaction, applying all changes made within the transaction scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transaction has been completed.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error committing the transaction.</exception>
        </member>
        <member name="M:MicroLite.ITransaction.Enlist(System.Data.IDbCommand)">
            <summary>
            Enlists the specified command in the transaction if the transaction is active.
            </summary>
            <param name="command">The command to be enlisted.</param>
        </member>
        <member name="M:MicroLite.ITransaction.Rollback">
            <summary>
            Rollbacks the transaction, undoing all changes made within the transaction scope.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the transaction has been completed.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error rolling back the transaction.</exception>
        </member>
        <member name="P:MicroLite.ITransaction.IsActive">
            <summary>
            Gets a value indicating whether this transaction is active.
            </summary>
        </member>
        <member name="P:MicroLite.ITransaction.IsolationLevel">
            <summary>
            Gets the isolation level of the transaction.
            </summary>
        </member>
        <member name="P:MicroLite.ITransaction.WasCommitted">
            <summary>
            Gets a value indicating whether this transaction has been committed.
            </summary>
        </member>
        <member name="P:MicroLite.ITransaction.WasRolledBack">
            <summary>
            Gets a value indicating whether this transaction has been rolled back.
            </summary>
        </member>
        <member name="M:MicroLite.Core.AdoTransaction.#ctor(System.Data.IDbTransaction)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Core.AdoTransaction"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
            <remarks>This is to enable easier unit testing only, all production code should call Transaction.Begin().</remarks>
        </member>
        <member name="T:MicroLite.Core.Include">
            <summary>
            The base class for include implementations.
            </summary>
        </member>
        <member name="M:MicroLite.Core.Include.BuildValue(System.Data.IDataReader,MicroLite.Core.IObjectBuilder)">
            <summary>
            Builds the included value from the results in the data reader using the supplied object builder.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> containing the results.</param>
            <param name="objectBuilder">The object builder to use to build the included value.</param>
        </member>
        <member name="P:MicroLite.Core.Include.HasValue">
            <summary>
            Gets or sets a value indicating whether this include has a value.
            </summary>
        </member>
        <member name="T:MicroLite.Core.IncludeMany`1">
            <summary>
            The default implementation of <see cref="T:MicroLite.IIncludeMany`1"/>.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="T:MicroLite.IIncludeMany`1">
            <summary>
            The interface for including a multiple results.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="P:MicroLite.IIncludeMany`1.HasValue">
            <summary>
            Gets a value indicating whether this include has a value.
            </summary>
        </member>
        <member name="P:MicroLite.IIncludeMany`1.Values">
            <summary>
            Gets the included values.
            </summary>
            <value>
            Values will be in one of the following states:
             - If the overall query has not been executed the value will be an empty collection.
             - If the query yielded no results, it will be an empty collection; otherwise it will contain the results of the query.
            </value>
        </member>
        <member name="T:MicroLite.Core.IncludeScalar`1">
            <summary>
            The default implementation of <see cref="T:MicroLite.IInclude`1"/> for scalar results.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="T:MicroLite.IInclude`1">
            <summary>
            The interface for including a single result.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="P:MicroLite.IInclude`1.HasValue">
            <summary>
            Gets a value indicating whether this include has a value.
            </summary>
        </member>
        <member name="P:MicroLite.IInclude`1.Value">
            <summary>
            Gets the included value.
            </summary>
            <value>
            Value will be in one of the following states:
             - If the overall query has not been executed the value will be equal to its default value (null for reference types).
             - If the query yielded no results, it will be its default value; otherwise it will be the result of the query.
            </value>
        </member>
        <member name="T:MicroLite.Core.IncludeSingle`1">
            <summary>
            The default implementation of <see cref="T:MicroLite.IInclude`1"/> for mapped objects.
            </summary>
            <typeparam name="T">The type of object to be included.</typeparam>
        </member>
        <member name="T:MicroLite.Core.ReadOnlySession">
            <summary>
            The default implementation of <see cref="T:MicroLite.IReadOnlySession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.IReadOnlySession">
            <summary>
            The interface which provides the read methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.IReadOnlySession.BeginTransaction">
             <summary>
             Begins the transaction with the default isolation level of the connection.
             </summary>
             <returns>An <see cref="T:MicroLite.ITransaction"/> with the default isolation level of the connection.</returns>
             <remarks>It is a good idea to perform all insert/update/delete actions inside a transaction.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     // perform actions against ISession.
                     // ...
            
                     transaction.Commit();
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.BeginTransaction(System.Data.IsolationLevel)">
             <summary>
             Begins the transaction with the specified isolation level.
             </summary>
             <param name="isolationLevel">The isolation level to use for the transaction.</param>
             <returns>An <see cref="T:MicroLite.ITransaction"/> with the specified <see cref="T:System.Data.IsolationLevel"/>.</returns>
             <remarks>It is a good idea to perform all insert/update/delete actions inside a transaction.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 // This overload allows us to specify a specific IsolationLevel.
                 using (var transaction = session.BeginTransaction(IsolationLevel.ReadCommitted))
                 {
                     // perform actions against ISession.
                     // ...
            
                     try
                     {
                         transaction.Commit();
                     }
                     catch (Exception exception)
                     {
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Fetch``1(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query and returns the matching objects in a list.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The objects that match the query in a list.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 var query = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 1324);
            
                 var invoices = session.Fetch&lt;Invoice&gt;(query);
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Paged``1(MicroLite.SqlQuery,System.Int32,System.Int32)">
             <summary>
             Pages the specified SQL query and returns an <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to page before executing.</param>
             <param name="page">The page number (supply a 1 for first page).</param>
             <param name="resultsPerPage">The number of results per page.</param>
             <returns>A <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:System.ArgumentOutOfRangeException">Thrown if page or resultsPerPage are below 1.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 var query = new SqlQuery("SELECT * FROM Customers WHERE LastName = @p0", "Smith");
            
                 var customers = session.Paged&lt;Customer&gt;(query, page: 1, resultsPerPage: 25);
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Paged``1(MicroLite.SqlQuery,MicroLite.PagingOptions)">
             <summary>
             Pages the specified SQL query and returns an <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.
             </summary>
             <typeparam name="T">The type of object the query relates to.</typeparam>
             <param name="sqlQuery">The SQL query to page before executing.</param>
             <param name="pagingOptions">The <see cref="T:MicroLite.PagingOptions"/>.</param>
             <returns>A <see cref="T:MicroLite.PagedResult`1"/> containing the desired results.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 var query = new SqlQuery("SELECT * FROM Customers WHERE LastName = @p0", "Smith");
            
                 var customers = session.Paged&lt;Customer&gt;(query, PagingOptions.ForPage(page: 1, resultsPerPage: 25));
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Projection(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query and returns the results as a list of dynamic objects.
             </summary>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The results as a list of dynamic objects.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <remarks>This method is not available in the .net 3.5 build of MicroLite.</remarks>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 // Create an ad-hoc query, this could select a number of columns accross multiple tables if desired.
                 var query = new SqlQuery("SELECT Name, DoB FROM Customers");
            
                 // The results of the projection will be an IList&lt;dynamic&gt;
                 var results = session.Advanced.Projection(query);
            
                 foreach (var item in results)
                 {
                     // The property names of each dynamic result will match (including case) the column names specified in the query.
                     Console.WriteLine(item.Name);
                     Console.WriteLine(item.DoB);
                 }
             }
             </code>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 var query = new SqlQuery(@"SELECT Customer.Name AS CustomerName, SUM(Invoices.InvoiceTotal) AS InvoiceTotal
                     FROM Customers
                     INNER JOIN Invoices ON Invoices.CustomerID = Customers.CustomerID
                     GROUP BY Customers.Name
                     ORDER BY InvoiceTotal DESC");
            
                 var results = session.Advanced.Projection(query);
            
                 foreach (var item in results)
                 {
                     // The property names of each dynamic result will match the column names specified in the query.
                     Console.WriteLine(item.CustomerName);
                     Console.WriteLine(item.InvoiceTotal);
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Single``1(System.Object)">
            <summary>
            Returns the instance of the specified type which corresponds to the row with the specified identifier
            in the mapped table, or null if the identifier values does not exist in the table.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="identifier">The record identifier.</param>
            <returns>An instance of the specified type or null if no matching record exists.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
            <example>
            <code>
            using (var session = sessionFactory.OpenSession())
            {
                var customer = session.Single&lt;Customer&gt;(17867);
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.IReadOnlySession.Single``1(MicroLite.SqlQuery)">
             <summary>
             Returns a single instance based upon the specified SQL query, or null if no result is returned.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>An instance of the specified type or null if no matching record exists.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 var query = new SqlQuery("SELECT * FROM Customers WHERE EmailAddress = @p0", "fred.flintstone@bedrock.com");
            
                 // This overload is useful to retrieve a single object based upon a unique value which isn't it's identifier.
                 var customer = session.Single&lt;Customer&gt;(query);
             }
             </code>
             </example>
        </member>
        <member name="P:MicroLite.IReadOnlySession.Include">
            <summary>
            Gets the operations which allow additional objects to be queried in a single database call.
            </summary>
        </member>
        <member name="P:MicroLite.IReadOnlySession.Transaction">
            <summary>
            Gets the current transaction or null if one has not been started.
            </summary>
        </member>
        <member name="T:MicroLite.IIncludeSession">
            <summary>
            The interface which provides access to include operations.
            </summary>
            <remarks>
            These operations allow for batch included values and have been moved to a separate interface to avoid
            cluttering the ISession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IIncludeSession.Many``1(MicroLite.SqlQuery)">
             <summary>
             Includes many instances based upon the specified SQL query.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A pointer to the included instances of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 // Query to fetch the invoices for the customer.
                 var invoicesQuery = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 1792);
            
                 // Tell the session to include the invoices.
                 var invoices = session.Include.Many&lt;Invoice&gt;(invoicesQuery);
            
                 // At this point, invoices will point to an IIncludeMany&lt;Invoice&gt; which will have no values.
                 // You can call include for multiple things, they will all be loaded in a single database call once
                 // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                 // Load the customer.
                 var customer = session.Single&lt;Customer&gt;(1792);
            
                 // We can now acces the invoices for the customer
                 foreach (var invoice in invoices.Values)
                 {
                     // ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IIncludeSession.Scalar``1(MicroLite.SqlQuery)">
             <summary>
             Includes a single value based upon the specified SQL query.
             </summary>
             <typeparam name="T">The type of value to be returned.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>A pointer to the included value of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 // Query to count the invoices for the customer.
                 var invoicesCountQuery = new SqlQuery("SELECT COUNT(InvoiceId) AS InvoiceCount FROM Invoices WHERE CustomerId = @p0", 1792);
            
                 // Tell the session to include the invoices count.
                 var invoicesCount = session.Include.Scalar&lt;int&gt;(invoicesQuery);
            
                 // At this point, invoices will point to an IInclude&lt;int&gt; which will have it's default value of 0.
                 // You can call include for multiple things, they will all be loaded in a single database call once
                 // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                 // Load the customer.
                 var customer = session.Single&lt;Customer&gt;(1792);
            
                 // We can now acces the invoices count for the customer
                 if (invoicesCount.Value &gt; 0)
                 {
                     ...
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IIncludeSession.Single``1(System.Object)">
             <summary>
             Includes the instance of the specified type which corresponds to the row with the specified identifier
             in the mapped table.
             </summary>
             <typeparam name="T">The type of object.</typeparam>
             <param name="identifier">The record identifier.</param>
             <returns>A pointer to the included instance of the specified type.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified identifier is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 // Tell the session to include the customer.
                 var includeCustomer = session.Include.Single&lt;Customer&gt;(3264);
            
                 // At this point, includeCustomer will point to an IInclude&lt;Customer&gt; which will have no value.
                 // You can call include for multiple things, they will all be loaded in a single database call once
                 // either ISession.Single, ISession.Fetch or ISession.Paged is called.
            
                 // Query to fetch the invoices for the customer.
                 var invoicesQuery = new SqlQuery("SELECT * FROM Invoices WHERE CustomerId = @p0", 3264);
            
                 // Load the invoices.
                 var invoices = session.Fetch&lt;Invoice&gt;(query);
            
                 // We can now acces the customer
                 Console.WriteLine(includeCustomer.Value.Name);
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IIncludeSession.Single``1(MicroLite.SqlQuery)">
            <summary>
            Includes a single instance based upon the specified SQL query.
            </summary>
            <typeparam name="T">The type of object.</typeparam>
            <param name="sqlQuery">The SQL query to execute.</param>
            <returns>A pointer to the included instance of the specified type.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the query.</exception>
        </member>
        <member name="T:MicroLite.Infrastructure.AppSettingSymmetricAlgorithmProvider">
            <summary>
            An implementation of <see cref="T:MicroLite.Infrastructure.ISymmetricAlgorithmProvider"/> which reads the values to use from the app.config.
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.SymmetricAlgorithmProvider">
            <summary>
            A base class for ISymmetricAlgorithmProvider implementations.
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.ISymmetricAlgorithmProvider">
            <summary>
            The interface for a class which can provide an <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Infrastructure.ISymmetricAlgorithmProvider.CreateAlgorithm">
            <summary>
            Creates an instance of the symmetric algorithm to be used for encryption and decryption.
            </summary>
            <returns>An instance of the required symmetric algorithm.</returns>
        </member>
        <member name="M:MicroLite.Infrastructure.SymmetricAlgorithmProvider.CreateAlgorithm">
            <summary>
            Creates an instance of the symmetric algorithm to be used for encryption and decryption.
            </summary>
            <returns>
            An instance of the required symmetric algorithm.
            </returns>
        </member>
        <member name="M:MicroLite.Infrastructure.SymmetricAlgorithmProvider.Configure(System.String,System.Byte[])">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Infrastructure.SymmetricAlgorithmProvider"/> class.
            </summary>
            <param name="algorithmName">The algorithm name.</param>
            <param name="algorithmKey">The key bytes.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if algorithmName or algorithmKey is null.
            </exception>
        </member>
        <member name="M:MicroLite.Infrastructure.AppSettingSymmetricAlgorithmProvider.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Infrastructure.AppSettingSymmetricAlgorithmProvider"/> class.
            </summary>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the expected configuration values are missing in the app.config.</exception>
        </member>
        <member name="T:MicroLite.DbEncryptedString">
            <summary>
            A class which represents a string which is encrypted before being written to the database
            and decrypted after being read from the database.
            </summary>
        </member>
        <member name="M:MicroLite.DbEncryptedString.op_Implicit(System.String)~MicroLite.DbEncryptedString">
            <summary>
            Returns a DbEncryptedString containing the value of the specified string.
            </summary>
            <param name="value">The string to convert value.</param>
            <returns>A DbEncryptedString containing the value of the specified string.</returns>
        </member>
        <member name="M:MicroLite.DbEncryptedString.op_Implicit(MicroLite.DbEncryptedString)~System.String">
            <summary>
            Returns a string containing the value of the DbEncryptedString.
            </summary>
            <param name="dbEncryptedString">The db encrypted string.</param>
            <returns>A string containing the value of the DbEncryptedString.</returns>
        </member>
        <member name="M:MicroLite.DbEncryptedString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.DbEncryptedString.Equals(MicroLite.DbEncryptedString)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MicroLite.DbEncryptedString.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.DbEncryptedString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:MicroLite.Dialect.MySqlDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for MySql server.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.SqlDialect">
            <summary>
            The base class for implementations of <see cref="T:MicroLite.Dialect.ISqlDialect"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.ISqlDialect">
            <summary>
            The interface for a class which builds an <see cref="T:MicroLite.SqlQuery"/> for a object instance.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.BuildCommand(System.Data.IDbCommand,MicroLite.SqlQuery)">
            <summary>
            Builds the command using the values in the specified SqlQuery.
            </summary>
            <param name="command">The command to build.</param>
            <param name="sqlQuery">The SQL query containing the values for the command.</param>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.Combine(System.Collections.Generic.IEnumerable{MicroLite.SqlQuery})">
            <summary>
            Combines the specified SQL queries into a single SqlQuery.
            </summary>
            <param name="sqlQueries">The SQL queries to be combined.</param>
            <returns>The combined <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.CountQuery(MicroLite.SqlQuery)">
            <summary>
            Creates an SqlQuery to count the number of records which would be returned by the specified SqlQuery.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <returns>An <see cref="T:MicroLite.SqlQuery"/> to count the number of records which would be returned by the specified SqlQuery.</returns>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.CreateQuery(System.Data.StatementType,System.Object)">
            <summary>
            Creates an SqlQuery with the specified statement type for the specified instance.
            </summary>
            <param name="statementType">Type of the statement.</param>
            <param name="instance">The instance to generate the SqlQuery for.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the statement type is not supported.</exception>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.CreateQuery(System.Data.StatementType,System.Type,System.Object)">
            <summary>
            Creates an SqlQuery with the specified statement type for the specified type and identifier.
            </summary>
            <param name="statementType">Type of the statement.</param>
            <param name="forType">The type of object to create the query for.</param>
            <param name="identifier">The identifier of the instance to create the query for.</param>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the statement type is not supported.</exception>
        </member>
        <member name="M:MicroLite.Dialect.ISqlDialect.PageQuery(MicroLite.SqlQuery,MicroLite.PagingOptions)">
            <summary>
            Creates an SqlQuery to page the records which would be returned by the specified SqlQuery based upon the paging options.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="pagingOptions">The paging options.</param>
            <returns>
            A <see cref="T:MicroLite.SqlQuery"/> to return the paged results of the specified query.
            </returns>
        </member>
        <member name="P:MicroLite.Dialect.ISqlDialect.SupportsBatchedQueries">
            <summary>
            Gets a value indicating whether this SqlDialect supports batched queries.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.BuildCommand(System.Data.IDbCommand,MicroLite.SqlQuery)">
            <summary>
            Builds the command using the values in the specified SqlQuery.
            </summary>
            <param name="command">The command to build.</param>
            <param name="sqlQuery">The SQL query containing the values for the command.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the number of arguments does not match the number of parameter names.</exception>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.Combine(System.Collections.Generic.IEnumerable{MicroLite.SqlQuery})">
            <summary>
            Combines the specified SQL queries into a single SqlQuery.
            </summary>
            <param name="sqlQueries">The SQL queries to be combined.</param>
            <returns>
            The combined <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if sqlQueries is null.</exception>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.CountQuery(MicroLite.SqlQuery)">
            <summary>
            Creates an SqlQuery to count the number of records which would be returned by the specified SqlQuery.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <returns>
            An <see cref="T:MicroLite.SqlQuery"/> to count the number of records which would be returned by the specified SqlQuery.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.CreateQuery(System.Data.StatementType,System.Object)">
            <summary>
            Creates an SqlQuery with the specified statement type for the specified instance.
            </summary>
            <param name="statementType">Type of the statement.</param>
            <param name="instance">The instance to generate the SqlQuery for.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Thrown if the StatementType is not supported.</exception>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.CreateQuery(System.Data.StatementType,System.Type,System.Object)">
            <summary>
            Creates an SqlQuery with the specified statement type for the specified type and identifier.
            </summary>
            <param name="statementType">Type of the statement.</param>
            <param name="forType">The type of object to create the query for.</param>
            <param name="identifier">The identifier of the instance to create the query for.</param>
            <returns>
            The created <see cref="T:MicroLite.SqlQuery"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">Thrown if the StatementType is not supported.</exception>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.PageQuery(MicroLite.SqlQuery,MicroLite.PagingOptions)">
            <summary>
            Creates an SqlQuery to page the records which would be returned by the specified SqlQuery based upon the paging options.
            </summary>
            <param name="sqlQuery">The SQL query.</param>
            <param name="pagingOptions">The paging options.</param>
            <returns>
            A <see cref="T:MicroLite.SqlQuery"/> to return the paged results of the specified query.
            </returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.AddParameters(System.Data.IDbCommand,MicroLite.SqlQuery,System.Collections.Generic.IList{System.String})">
            <summary>
            Adds the parameters.
            </summary>
            <param name="command">The command.</param>
            <param name="sqlQuery">The SQL query.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.AppendTableName(MicroLite.Mapping.ObjectInfo,System.Text.StringBuilder)">
            <summary>
            Appends the name of the table.
            </summary>
            <param name="objectInfo">The object info.</param>
            <param name="sqlBuilder">The SQL builder.</param>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.EscapeSql(System.String)">
            <summary>
            Escapes the SQL.
            </summary>
            <param name="sql">The SQL.</param>
            <returns>The escaped SQL.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.FormatParameter(System.Int32)">
            <summary>
            Formats the parameter.
            </summary>
            <param name="parameterPosition">The parameter position.</param>
            <returns>The formatted parameter.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.GetCommandText(System.String)">
            <summary>
            Gets the command text.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The actual command text.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.GetCommandType(System.String)">
            <summary>
            Gets the type of the command.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The CommandType for the specified command text.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.ReadOrderBy(System.String)">
            <summary>
            Reads the order by clause from the specified command text excluding the ORDER BY keyword.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The columns in the order by list.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.ReadSelectList(System.String)">
            <summary>
            Reads the select clause from the specified command text including the SELECT keyword.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The columns in the select list.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.ReadTableName(System.String)">
            <summary>
            Reads the name of the table the sql query is targeting.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The name of the table the sql query is targeting.</returns>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialect.ReadWhereClause(System.String)">
            <summary>
            Reads the where clause from the specified command text excluding the WHERE keyword.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The where clause without the WHERE keyword.</returns>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SupportsBatchedQueries">
            <summary>
            Gets a value indicating whether this SqlDialect supports batched queries.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.CloseQuote">
            <summary>
            Gets the close quote character.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.DefaultTableSchema">
            <summary>
            Gets the default table schema.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.OpenQuote">
            <summary>
            Gets the open quote character.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SelectIdentityString">
            <summary>
            Gets the select identity string.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SelectSeparator">
            <summary>
            Gets the select separator.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SqlDialect.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.MySqlDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.MySqlDialect"/> class.
            </summary>
            <remarks>Constructor needs to be public so that it can be instantiated by SqlDialectFactory.</remarks>
        </member>
        <member name="P:MicroLite.Dialect.MySqlDialect.CloseQuote">
            <summary>
            Gets the close quote character.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MySqlDialect.OpenQuote">
            <summary>
            Gets the open quote character.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MySqlDialect.SelectIdentityString">
            <summary>
            Gets the select identity string.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MySqlDialect.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MySqlDialect.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.PostgreSqlDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for Postgre server.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.PostgreSqlDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.PostgreSqlDialect"/> class.
            </summary>
            <remarks>Constructor needs to be public so that it can be instantiated by SqlDialectFactory.</remarks>
        </member>
        <member name="P:MicroLite.Dialect.PostgreSqlDialect.SelectIdentityString">
            <summary>
            Gets the select identity string.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.PostgreSqlDialect.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.PostgreSqlDialect.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.SqlDialectFactory">
            <summary>
            The factory class for managing <see cref="T:MicroLite.Dialect.ISqlDialect"/> implementations.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialectFactory.Add(System.String,System.Type)">
            <summary>
            Adds the specified dialect name and type to MicroLite ORM.
            </summary>
            <param name="dialectName">Name of the dialect.</param>
            <param name="dialectType">Type of the dialect.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the dialect type does not implement ISqlDialect or the dialect name is already registered.</exception>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialectFactory.GetDialect(System.String)">
            <summary>
            Gets the dialect with the specified name.
            </summary>
            <param name="dialectName">The name of the dialect.</param>
            <returns>The <see cref="T:MicroLite.Dialect.ISqlDialect"/> for the specified name.</returns>
            <exception cref="T:System.NotSupportedException">The specified dialect name is not supported.</exception>
        </member>
        <member name="M:MicroLite.Dialect.SqlDialectFactory.VerifyDialect(System.String)">
            <summary>
            Verifies that the dialect name is an <see cref="T:MicroLite.Dialect.ISqlDialect"/> supported by MicroLite.
            </summary>
            <param name="dialectName">Name of the dialect.</param>
            <exception cref="T:System.NotSupportedException">The specified dialect name is not supported.</exception>
        </member>
        <member name="T:MicroLite.Dialect.SQLiteDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for SQLite.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.SQLiteDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.SQLiteDialect"/> class.
            </summary>
            <remarks>Constructor needs to be public so that it can be instantiated by SqlDialectFactory.</remarks>
        </member>
        <member name="P:MicroLite.Dialect.SQLiteDialect.SelectIdentityString">
            <summary>
            Gets the select identity string.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SQLiteDialect.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.SQLiteDialect.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.GuidGenerator">
            <summary>
            A class for generating guids using our comb implementation.
            </summary>
            <remarks>
            Loosely based upon Mark J. Miller's implementation <![CDATA[http://www.developmentalmadness.com/archive/2010/10/13/sequential-guid-algorithm-ndash-improving-the-algorithm.aspx]]>
            </remarks>
        </member>
        <member name="M:MicroLite.GuidGenerator.CreateComb">
            <summary>
            Creates a new Guid using our comb implementation.
            </summary>
            <returns>A new Guid.</returns>
        </member>
        <member name="M:MicroLite.GuidGenerator.CreateComb(System.DateTime)">
            <summary>
            Creates a new Guid using our comb implementation.
            </summary>
            <param name="dateTime">The date time to use as the seed for the guid.</param>
            <returns>A new Guid</returns>
        </member>
        <member name="T:MicroLite.Infrastructure.IHaveReadOnlySession">
            <summary>
            An interface for classes which have an <see cref="T:MicroLite.IReadOnlySession"/> property.
            </summary>
        </member>
        <member name="P:MicroLite.Infrastructure.IHaveReadOnlySession.Session">
            <summary>
            Gets or sets the read-only MicroLite session.
            </summary>
        </member>
        <member name="T:MicroLite.Infrastructure.IHaveSession">
            <summary>
            An interface for classes which have an <see cref="T:MicroLite.ISession"/> property.
            </summary>
        </member>
        <member name="P:MicroLite.Infrastructure.IHaveSession.Session">
            <summary>
            Gets or sets the MicroLite session.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.GuidCombListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for setting the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.GuidComb is used.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.Listener">
            <summary>
            Empty implementation of IListener.
            </summary>
            <remarks>
            Provided so that implementations don't have to implement full interface.
            Quite possibly a violation of SRP but it does allow for simplified extensions to the framework.
            </remarks>
        </member>
        <member name="T:MicroLite.Listeners.IListener">
            <summary>
            The interface which exposes hooks into the processing of an object by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.IListener.AfterDelete(System.Object,System.Int32)">
            <summary>
            Invoked after the SqlQuery to delete the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been deleted.</param>
            <param name="rowsAffected">The number of rows affected by the delete.</param>
        </member>
        <member name="M:MicroLite.Listeners.IListener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the SqlQuery to insert the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result.</param>
        </member>
        <member name="M:MicroLite.Listeners.IListener.AfterUpdate(System.Object,System.Int32)">
            <summary>
            Invoked after the SqlQuery to update the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been updates.</param>
            <param name="rowsAffected">The number of rows affected by the update.</param>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <remarks>This is called before IListener.BeforeDelete(instance, sqlQuery).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeDelete(System.Object,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is executed.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
            <remarks>This is called after IListener.BeforeDelete(instance).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
            <remarks>This is called before IListener.BeforeInsert(instance, sqlQuery).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeInsert(System.Object,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is executed.
            </summary>
            <param name="instance">The instance to be inserted.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
            <remarks>This is called after IListener.BeforeInsert(instance).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <remarks>This is called before IListener.BeforeUpdate(instance, sqlQuery).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.IListener.BeforeUpdate(System.Object,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is executed.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
            <remarks>This is called after IListener.BeforeUpdate(instance).</remarks>
        </member>
        <member name="M:MicroLite.Listeners.Listener.AfterDelete(System.Object,System.Int32)">
            <summary>
            Invoked after the SqlQuery to delete the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been deleted.</param>
            <param name="rowsAffected">The number of rows affected by the delete.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the SqlQuery to insert the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.AfterUpdate(System.Object,System.Int32)">
            <summary>
            Invoked after the SqlQuery to update the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been updates.</param>
            <param name="rowsAffected">The number of rows affected by the update.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeDelete(System.Object,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is executed.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeInsert(System.Object,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is executed.
            </summary>
            <param name="instance">The instance to be inserted.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
        </member>
        <member name="M:MicroLite.Listeners.Listener.BeforeUpdate(System.Object,MicroLite.SqlQuery)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is executed.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <param name="sqlQuery">The SqlQuery to be executed.</param>
        </member>
        <member name="P:MicroLite.Listeners.Listener.Listeners">
            <summary>
            Gets the listener collection which contains all listeners registered with the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.GuidCombListener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="M:MicroLite.Listeners.GuidCombListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
        </member>
        <member name="M:MicroLite.Listeners.GuidCombListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="T:MicroLite.Mapping.ColumnAttribute">
            <summary>
            An attribute which can be applied to a property to specify the column name that the property maps to.
            </summary>
            <example>
            <code>
            // Option 1 - Column and property name match.
            [Column("FirstName")]
            public string FirstName
            {
                get;
                set;
            }
            </code>
            <code>
            // Option 2 - Column and property name differ.
            [Column("FName")]
            public string FirstName
            {
                get;
                set;
            }
            </code>
            <code>
            // Additionally, it is possible to restrict insert or updates to a column.
            [Column("Created", allowInsert: true, allowUpdate: false)]
            public DateTime Created
            {
                get;
                set;
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Mapping.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name of the column in the database table that the property maps to.</param>
        </member>
        <member name="M:MicroLite.Mapping.ColumnAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name of the column in the database table that the property maps to.</param>
            <param name="allowInsert">true if the column value can be inserted, otherwise false.</param>
            <param name="allowUpdate">true if the column value can be updated, otherwise false.</param>
        </member>
        <member name="P:MicroLite.Mapping.ColumnAttribute.AllowInsert">
            <summary>
            Gets a value indicating whether the column value is allowed to be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnAttribute.AllowUpdate">
            <summary>
            Gets a value indicating whether the column value is allowed to be updated.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnAttribute.Name">
            <summary>
            Gets the name of the column in the database table that the property maps to
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.Configure">
            <summary>
            The class used to configure the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.Configure.Extensions">
            <summary>
            Begins the process of specifying the extensions which should be used by MicroLite.
            </summary>
            <returns>The interface which provides the extension points.</returns>
            <remarks>Extensions should be configured before configuring any connections.</remarks>
            <example>
            Extensions can be added in any order although it is advised to add the logging extension first if you are using one
            so that other extensions can write to the log.
            <code>
            Configure
                .Extensions()
                .WithLog4Net() // To use log4net, install the MicroLite.Extensions.Log4Net package (there is also an NLog package).
                .WithMvc(); // To use the MVC extensions, install the MicroLite.Extensions.Mvc package.
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Configuration.Configure.Fluently">
            <summary>
            Begins the configuration process using the fluent API.
            </summary>
            <returns>The next step in the fluent configuration.</returns>
            <example>
            Option 1: Use the default SqlDialect which is MicroLite.Dialect.MsSqlDialect.
            <code>
            var sessionFactory = Configure
                .Fluently()
                .ForConnection("TestDB")
                .CreateSessionFactory();
            </code>
            </example>
            <example>
            Option 2: Use an alternative SqlDialect which is supported by MicroLite (such as SQLite).
            <code>
            var sessionFactory = Configure
                .Fluently()
                .ForConnection("TestDB", "MicroLite.Dialect.SQLiteDialect")
                .CreateSessionFactory();
            </code>
            </example>
        </member>
        <member name="P:MicroLite.Configuration.Configure.SessionFactories">
            <summary>
            Gets the session factories created by the configuration.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.ConfigureExtensions">
            <summary>
            The class used to configure extensions to the MicroLite ORM framework.
            </summary>
        </member>
        <member name="T:MicroLite.Configuration.IConfigureExtensions">
            <summary>
            The interface which specifies the options for configuring extensions to the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureExtensions.SetLogResolver(System.Func{System.String,MicroLite.Logging.ILog})">
            <summary>
            Sets the function which can be called by MicroLite to resolve the <see cref="T:MicroLite.Logging.ILog"/> to use.
            </summary>
            <param name="logResolver">The function to resolve an ILog.</param>
        </member>
        <member name="M:MicroLite.Configuration.IConfigureExtensions.SetMappingConvention(MicroLite.Mapping.IMappingConvention)">
            <summary>
            Sets the mapping convention.
            </summary>
            <param name="mappingConvention">The mapping convention to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if mappingConvention is null.</exception>
        </member>
        <member name="T:MicroLite.Core.SessionFactoryOptions">
            <summary>
            The class used to hold the options for configuring a session factory.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.ConnectionName">
            <summary>
            Gets or sets the connection name.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.ProviderFactory">
            <summary>
            Gets or sets the provider factory.
            </summary>
        </member>
        <member name="P:MicroLite.Core.SessionFactoryOptions.SqlDialect">
            <summary>
            Gets or sets the sql dialect for the connection.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.AssignedListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for checking the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Assigned is used.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.AssignedListener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="M:MicroLite.Listeners.AssignedListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="M:MicroLite.Listeners.AssignedListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="T:MicroLite.Core.ConnectionManager">
            <summary>
            The default implementation of <see cref="T:MicroLite.Core.IConnectionManager"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Core.IConnectionManager">
            <summary>
            The interface for a class which manages an IDbConnection.
            </summary>
        </member>
        <member name="M:MicroLite.Core.IConnectionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">The isolation level to use for the transaction.</param>
            <returns>An <see cref="T:MicroLite.ITransaction"/> with the specified <see cref="T:System.Data.IsolationLevel"/>.</returns>
        </member>
        <member name="M:MicroLite.Core.IConnectionManager.CommandCompleted(System.Data.IDbCommand)">
            <summary>
            Called when the command is completed to free any resources which are no longer needed.
            </summary>
            <param name="command">The completed command.</param>
        </member>
        <member name="M:MicroLite.Core.IConnectionManager.CreateCommand">
            <summary>
            Creates a new IDbCommand for the managed connection which will be enlisted in the active transaction.
            </summary>
            <returns>The IDbCommand for the connection.</returns>
        </member>
        <member name="P:MicroLite.Core.IConnectionManager.CurrentTransaction">
            <summary>
            Gets the current transaction or null if no transaction has been started.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.GuidListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for setting the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.Guid is used.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.GuidListener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="M:MicroLite.Listeners.GuidListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
        </member>
        <member name="M:MicroLite.Listeners.GuidListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="T:MicroLite.Listeners.DbGeneratedListener">
            <summary>
            The implementation of <see cref="T:MicroLite.Listeners.IListener"/> for setting the instance identifier value if
            <see cref="T:MicroLite.Mapping.IdentifierStrategy"/>.DbGenerated is used.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.DbGeneratedListener.AfterInsert(System.Object,System.Object)">
            <summary>
            Invoked after the SqlQuery to insert the record for the instance has been executed.
            </summary>
            <param name="instance">The instance which has been inserted.</param>
            <param name="executeScalarResult">The execute scalar result.</param>
        </member>
        <member name="M:MicroLite.Listeners.DbGeneratedListener.BeforeDelete(System.Object)">
            <summary>
            Invoked before the SqlQuery to delete the record from the database is created.
            </summary>
            <param name="instance">The instance to be deleted.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="M:MicroLite.Listeners.DbGeneratedListener.BeforeInsert(System.Object)">
            <summary>
            Invoked before the SqlQuery to insert the record into the database is created.
            </summary>
            <param name="instance">The instance to be inserted.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has already been set.</exception>
        </member>
        <member name="M:MicroLite.Listeners.DbGeneratedListener.BeforeUpdate(System.Object)">
            <summary>
            Invoked before the SqlQuery to update the record in the database is created.
            </summary>
            <param name="instance">The instance to be updated.</param>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the identifier value for the object has not been set.</exception>
        </member>
        <member name="T:MicroLite.Core.IObjectBuilder">
            <summary>
            The interface for a class which builds an object instance from the values in a <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Core.IObjectBuilder.BuildDynamic(System.Data.IDataReader)">
            <summary>
            Builds a dynamic object from the values in the data reader.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> containing the values to populate the object with.</param>
            <returns>The new dynamic object populated with the values from the <see cref="T:System.Data.IDataReader"/>.</returns>
        </member>
        <member name="M:MicroLite.Core.IObjectBuilder.BuildInstance``1(MicroLite.Mapping.ObjectInfo,System.Data.IDataReader)">
            <summary>
            Builds an instance of the specified type, populating it with the values in the specified data reader.
            </summary>
            <typeparam name="T">The type of object to be built.</typeparam>
            <param name="objectInfo">The <see cref="T:MicroLite.Mapping.ObjectInfo"/> for the type to be built.</param>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> containing the values to populate the object with.</param>
            <returns>The new instance populated with the values from the <see cref="T:System.Data.IDataReader"/>.</returns>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an exception setting a property value.</exception>
        </member>
        <member name="T:MicroLite.Core.ObjectBuilder">
            <summary>
            The default implementation of <see cref="T:MicroLite.Core.IObjectBuilder"/>.
            </summary>
        </member>
        <member name="T:MicroLite.Core.Session">
            <summary>
            The default implementation of <see cref="T:MicroLite.ISession"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ISession">
            <summary>
            The interface which provides the write methods to map objects to database records.
            </summary>
        </member>
        <member name="M:MicroLite.ISession.Delete(System.Object)">
             <summary>
             Deletes the database record for the specified instance.
             </summary>
             <param name="instance">The instance to delete from the database.</param>
             <returns>true if the object was deleted successfully; otherwise false.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             bool deleted = false;
            
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     try
                     {
                         deleted = session.Delete(customer);
            
                         transaction.Commit();
                     }
                     catch
                     {
                         deleted = false;
            
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.ISession.Insert(System.Object)">
            <summary>
            Inserts a new database record for the specified instance.
            </summary>
            <param name="instance">The instance to persist the values for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the insert command.</exception>
            <example>
            <code>
            using (var session = sessionFactory.OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    session.Insert(customer);
                    transaction.Commit();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.ISession.InsertOrUpdate(System.Object)">
            <summary>
            Performs an insert or update in the database depending on whether the object is considered new (e.g. it has no identifier set).
            </summary>
            <param name="instance">The instance to persist the values for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the update command.</exception>
            <example>
            <code>
            using (var session = sessionFactory.OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    session.InsertOrUpdate(customer);
                    transaction.Commit();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.ISession.Update(System.Object)">
            <summary>
            Updates the database record for the specified instance with the current property values.
            </summary>
            <param name="instance">The instance to persist the values for.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if the specified instance is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the update command.</exception>
            <example>
            <code>
            using (var session = sessionFactory.OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    session.Update(customer);
                    transaction.Commit();
                }
            }
            </code>
            </example>
        </member>
        <member name="P:MicroLite.ISession.Advanced">
            <summary>
            Gets the advanced session operations.
            </summary>
        </member>
        <member name="T:MicroLite.IAdvancedSession">
            <summary>
            The interface which provides access to advanced session operations.
            </summary>
            <remarks>
            These operations allow for more advanced use and have been moved to a separate interface to avoid
            cluttering the ISession API.
            </remarks>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Delete(System.Type,System.Object)">
             <summary>
             Deletes the database record with the specified identifier for the specified type.
             </summary>
             <param name="type">The type to delete.</param>
             <param name="identifier">The identifier of the record to delete.</param>
             <returns>true if the object was deleted successfully; otherwise false.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified type or identifier is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the delete command.</exception>
             <example>
             <code>
             bool deleted = false;
            
             using (var session = sessionFactory.OpenSession())
             {
                 using (var transaction = session.BeginTransaction())
                 {
                     try
                     {
                         deleted = session.Advanced.Delete(typeof(Customer), identifier: 12823);
            
                         transaction.Commit();
                     }
                     catch
                     {
                         deleted = false;
            
                         transaction.Rollback();
                         // Log or throw the exception.
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedSession.Execute(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query and returns the number of rows affected.
             </summary>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The number of rows affected by the SQL query.</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 var query = new SqlQuery("UPDATE Customers SET Locked = 0 WHERE Locked = 1");
            
                 int unlocked = session.Advanced.Execute(query);
             }
             </code>
             </example>
        </member>
        <member name="M:MicroLite.IAdvancedSession.ExecuteScalar``1(MicroLite.SqlQuery)">
             <summary>
             Executes the specified SQL query as a scalar command.
             </summary>
             <typeparam name="T">The type of result to be returned.</typeparam>
             <param name="sqlQuery">The SQL query to execute.</param>
             <returns>The result of the scalar query (the first column in the first row returned).</returns>
             <exception cref="T:System.ObjectDisposedException">Thrown if the session has been disposed.</exception>
             <exception cref="T:System.ArgumentNullException">Thrown if the specified SqlQuery is null.</exception>
             <exception cref="T:MicroLite.MicroLiteException">Thrown if there is an error executing the command.</exception>
             <example>
             <code>
             using (var session = sessionFactory.OpenSession())
             {
                 // Create a query which returns a single result.
                 var query = new SqlQuery("SELECT COUNT(CustomerId) FROM Customers");
            
                 int customerCount = session.Advanced.ExecuteScalar&lt;int&gt;(query);
             }
             </code>
             </example>
        </member>
        <member name="T:MicroLite.Core.SessionFactory">
            <summary>
            The default implementation of <see cref="T:MicroLite.ISessionFactory"/>.
            </summary>
        </member>
        <member name="T:MicroLite.ISessionFactory">
            <summary>
            The interface which specifies the factory options for creating <see cref="T:MicroLite.ISession"/>s.
            </summary>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenReadOnlySession">
            <summary>
            Opens a new read only session to the database.
            </summary>
            <returns>A new read only session instance.</returns>
        </member>
        <member name="M:MicroLite.ISessionFactory.OpenSession">
            <summary>
            Opens a new session to the database.
            </summary>
            <returns>A new session instance.</returns>
        </member>
        <member name="P:MicroLite.ISessionFactory.ConnectionName">
            <summary>
            Gets the name of the connection used by the session factory.
            </summary>
        </member>
        <member name="P:MicroLite.ISessionFactory.SqlDialect">
            <summary>
            Gets the type of SQL dialect used by the session factory.
            </summary>
        </member>
        <member name="T:MicroLite.Dialect.MsSqlDialect">
            <summary>
            The implementation of <see cref="T:MicroLite.Dialect.ISqlDialect"/> for MsSql server.
            </summary>
        </member>
        <member name="M:MicroLite.Dialect.MsSqlDialect.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Dialect.MsSqlDialect"/> class.
            </summary>
            <remarks>Constructor needs to be public so that it can be instantiated by SqlDialectFactory.</remarks>
        </member>
        <member name="P:MicroLite.Dialect.MsSqlDialect.CloseQuote">
            <summary>
            Gets the close quote character.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MsSqlDialect.OpenQuote">
            <summary>
            Gets the open quote character.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MsSqlDialect.SelectIdentityString">
            <summary>
            Gets the select identity string.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MsSqlDialect.SqlParameter">
            <summary>
            Gets the SQL parameter.
            </summary>
        </member>
        <member name="P:MicroLite.Dialect.MsSqlDialect.SupportsNamedParameters">
            <summary>
            Gets a value indicating whether SQL parameters are named.
            </summary>
        </member>
        <member name="T:MicroLite.Listeners.ListenerCollection">
            <summary>
            The class which contains the IListeners used by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.ListenerCollection.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Listeners.ListenerCollection"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.ListenerCollection.Add``1">
            <summary>
            Adds the IListener to the collection.
            </summary>
            <typeparam name="T">The type of <see cref="T:MicroLite.Listeners.IListener"/> to add.</typeparam>
        </member>
        <member name="M:MicroLite.Listeners.ListenerCollection.Clear">
            <summary>
            Clears all IListeners registered.
            </summary>
        </member>
        <member name="M:MicroLite.Listeners.ListenerCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MicroLite.Listeners.ListenerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:MicroLite.Mapping.ColumnInfo">
            <summary>
            A class which contains information about a database table column and the property it is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ColumnInfo.#ctor(System.String,System.Reflection.PropertyInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ColumnInfo"/> class.
            </summary>
            <param name="columnName">The name of the column in the database table.</param>
            <param name="propertyInfo">The property info for the property the column maps to.</param>
            <param name="isIdentifier">A value indicating whether column is the table identifier column (primary key).</param>
            <param name="allowInsert">true if the column can be inserted, otherwise false.</param>
            <param name="allowUpdate">true if the column can be updated, otherwise false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if columnName or propertyInfo are null.</exception>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.AllowInsert">
            <summary>
            Gets a value indicating whether the column value is allowed to be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.AllowUpdate">
            <summary>
            Gets a value indicating whether the column value is allowed to be updated.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.ColumnName">
            <summary>
            Gets the name of the column in the database table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.IsIdentifier">
            <summary>
            Gets a value indicating whether column is the table identifier column (primary key).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ColumnInfo.PropertyInfo">
            <summary>
            Gets the property info for the property the column maps to.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.ConventionMappingSettings">
            <summary>
            A class containing the configurable settings.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ConventionMappingSettings.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ConventionMappingSettings"/> class.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.IdentifierStrategy">
            <summary>
            Gets or sets the identifier strategy (defaults to DbGenerated).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.TableSchema">
            <summary>
            Gets or sets the table schema (defaults to null).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ConventionMappingSettings.UsePluralClassNameForTableName">
            <summary>
            Gets or sets a value indicating whether to use the plural class name for the table name (defaults to true).
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.ConventionMappingConvention">
            <summary>
            The implementation of <see cref="T:MicroLite.Mapping.IMappingConvention"/> which uses a convention to map tables and columns
            to types and properties.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.IMappingConvention">
            <summary>
            The interface for a class which implements a mapping convention between a class and a table.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.IMappingConvention.CreateObjectInfo(System.Type)">
            <summary>
            Creates the object info for the specified type.
            </summary>
            <param name="forType">The type to create the object info for.</param>
            <returns>The <see cref="T:MicroLite.Mapping.ObjectInfo"/> for the specified type.</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.DbEncryptedStringTypeConverter">
            <summary>
            An ITypeConverter which can encrypt and decrypt the stored database value.
            </summary>
        </member>
        <member name="T:MicroLite.TypeConverters.TypeConverter">
            <summary>
            The base class for any implementation of <see cref="T:MicroLite.TypeConverters.ITypeConverter"/>.
            </summary>
        </member>
        <member name="T:MicroLite.TypeConverters.ITypeConverter">
            <summary>
            The interface for a class which can convert between property type values and database values.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified property type.
            </summary>
            <param name="propertyType">The type of the property value to be converted.</param>
            <returns>
              <c>true</c> if this instance can convert the specified property type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the property type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="propertyType">The property type to convert to.</param>
            <returns>An instance of the specified property type containing the specified value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.ITypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified property value into an instance of the database value.
            </summary>
            <param name="value">The property value to be converted.</param>
            <param name="propertyType">The property type to convert from.</param>
            <returns>An instance of the corresponding database type for the property type containing the property value.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.For(System.Type)">
            <summary>
            Gets the <see cref="T:MicroLite.TypeConverters.ITypeConverter"/> for the specified type.
            </summary>
            <param name="type">The type to get the converter for.</param>
            <returns>The <see cref="T:MicroLite.TypeConverters.ITypeConverter"/> for the specified type.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.ResolveActualType(System.Type)">
            <summary>
            Resolves the actual type. If the type is generic (as it would be for a nullable struct) it returns the inner type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>The actual type.</returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified property type.
            </summary>
            <param name="propertyType">The type of the property value to be converted.</param>
            <returns>
              <c>true</c> if this instance can convert the specified property type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the property type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="propertyType">The property type to convert to.</param>
            <returns>
            An instance of the specified property type containing the specified value.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified property value into an instance of the database value.
            </summary>
            <param name="value">The property value to be converted.</param>
            <param name="propertyType">The property type to convert from.</param>
            <returns>
            An instance of the corresponding database type for the property type containing the property value.
            </returns>
        </member>
        <member name="P:MicroLite.TypeConverters.TypeConverter.Converters">
            <summary>
            Gets the type converter collection which contains all type converters registered with the MicroLite ORM framework.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.DbEncryptedStringTypeConverter.#ctor(MicroLite.Infrastructure.ISymmetricAlgorithmProvider)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.TypeConverters.DbEncryptedStringTypeConverter"/> class.
            </summary>
            <param name="algorithmProvider">The symmetric algorithm provider to be used.</param>
        </member>
        <member name="M:MicroLite.TypeConverters.DbEncryptedStringTypeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this type converter can convert values for the specified property type.
            </summary>
            <param name="propertyType">The type of the property value to be converted.</param>
            <returns>
              <c>true</c> if this instance can convert the specified property type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.DbEncryptedStringTypeConverter.ConvertFromDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified database value into an instance of the property type.
            </summary>
            <param name="value">The database value to be converted.</param>
            <param name="propertyType">The property type to convert to.</param>
            <returns>
            An instance of the specified property type containing the specified value.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.DbEncryptedStringTypeConverter.ConvertToDbValue(System.Object,System.Type)">
            <summary>
            Converts the specified property value into an instance of the database value.
            </summary>
            <param name="value">The property value to be converted.</param>
            <param name="propertyType">The property type to convert from.</param>
            <returns>
            An instance of the corresponding database type for the property type containing the property value.
            </returns>
        </member>
        <member name="T:MicroLite.Mapping.InflectionService">
            <summary>
            A class for modifying the grammatical category of a word.
            </summary>
            <remarks>Based upon the example here <![CDATA[http://mattgrande.wordpress.com/2009/10/28/pluralization-helper-for-c/]]></remarks>
        </member>
        <member name="M:MicroLite.Mapping.InflectionService.AddInvariantWord(System.String)">
            <summary>
            Adds a word which is considered invariant such as equipment or species.
            </summary>
            <param name="word">The invariant word.</param>
        </member>
        <member name="M:MicroLite.Mapping.InflectionService.AddRule(System.String,System.String)">
            <summary>
            Adds (or replaces) the rule.
            </summary>
            <param name="searchPattern">The pattern to match upon.</param>
            <param name="replacementPattern">The replacement pattern.</param>
        </member>
        <member name="M:MicroLite.Mapping.InflectionService.ToPlural(System.String)">
            <summary>
            Returns the plural version of the specified singular word or the specified word if there is no plural version.
            </summary>
            <param name="word">The word to be pluralized.</param>
            <returns>The plural word, or if the word cannot be pluralized; the specified word.</returns>
        </member>
        <member name="T:MicroLite.Mapping.ObjectInfo">
            <summary>
            The class which describes a type and the table it is mapped to.
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.#ctor(System.Type,MicroLite.Mapping.TableInfo)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.ObjectInfo"/> class.
            </summary>
            <param name="forType">The type the object info relates to.</param>
            <param name="tableInfo">The table info.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if forType or tableInfo are null.</exception>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.For(System.Type)">
            <summary>
            Gets the object info for the specified type.
            </summary>
            <param name="forType">The type to get the object info for.</param>
            <returns>The <see cref="T:MicroLite.Mapping.ObjectInfo"/> for the specified <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if forType is null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if the specified type cannot be used with MicroLite.</exception>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.GetIdentifierValue(System.Object)">
            <summary>
            Gets the property value for the object identifier.
            </summary>
            <param name="instance">The instance to retrieve the value from.</param>
            <returns>The value of the identifier property.</returns>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.GetPropertyValueForColumn(System.Object,System.String)">
            <summary>
            Gets the property value for the specified column.
            </summary>
            <param name="instance">The instance to retrieve the value from.</param>
            <param name="columnName">Name of the column to get the value for.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.HasDefaultIdentifierValue(System.Object)">
            <summary>
            Determines whether the specified instance has the default identifier value.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
              <c>true</c> if the instance has the default identifier value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.Mapping.ObjectInfo.SetPropertyValueForColumn(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value mapped to the specified column on the instance.
            </summary>
            <param name="instance">The instance to set the property value on.</param>
            <param name="columnName">The name of the column the property is mapped to.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="P:MicroLite.Mapping.ObjectInfo.DefaultIdentifierValue">
            <summary>
            Gets the default identifier value.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ObjectInfo.ForType">
            <summary>
            Gets type the object info deals with.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.ObjectInfo.TableInfo">
            <summary>
            Gets the table info.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.AttributeMappingConvention">
            <summary>
            The implementation of <see cref="T:MicroLite.Mapping.IMappingConvention"/> which uses attributes to map tables and columns
            to types and properties only maps if an attribute is present (opt-in).
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.TableInfo">
            <summary>
            A class which contains information about a database table .
            </summary>
        </member>
        <member name="M:MicroLite.Mapping.TableInfo.#ctor(System.Collections.Generic.IList{MicroLite.Mapping.ColumnInfo},MicroLite.Mapping.IdentifierStrategy,System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.TableInfo"/> class.
            </summary>
            <param name="columns">The columns that are mapped for the table.</param>
            <param name="identifierStrategy">The identifier strategy used by the table.</param>
            <param name="name">The name of the table.</param>
            <param name="schema">The name of the schema the table exists within.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if columns or name are null.</exception>
            <exception cref="T:MicroLite.MicroLiteException">Thrown if no identifier column is specified.</exception>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.Columns">
            <summary>
            Gets the columns that are mapped for the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.IdentifierColumn">
            <summary>
            Gets the name of the column that is the table identifier column (primary key).
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.IdentifierStrategy">
            <summary>
            Gets the identifier strategy used by the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableInfo.Schema">
            <summary>
            Gets the name of the schema the table exists within.
            </summary>
        </member>
        <member name="T:MicroLite.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.AssignedListener_IdentifierNotSetForInsert">
            <summary>
              Looks up a localized string similar to The object cannot be inserted as it does not have an identifier value set and the identifier strategy specifies that it should be assigned before being inserted..
            </summary>
        </member>
        <member name="P:MicroLite.Messages.AttributeMappingConvention_IgnoringProperty">
            <summary>
              Looks up a localized string similar to The property [{0}].[{1}] will not be mapped by MicroLite as it has no ColumnAttribute.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.AttributeMappingConvention_NoTableAttribute">
            <summary>
              Looks up a localized string similar to The type [{0}] cannot be used by MicroLite as is not decorated with a TableAttribute.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConfigurationSymmetricAlgorithmProvider_MissingAlgorithm">
            <summary>
              Looks up a localized string similar to The Encryption algorithm is missing, please add the following value to app.settings: &lt;add key=&quot;MicroLite.DbEncryptedString.SymmetricAlgorithm&quot; value=&quot;AesManaged&quot; /&gt; (see http://msdn.microsoft.com/en-us/library/System.Security.Cryptography.SymmetricAlgorithm(v=vs.110).aspx for the fully supported list of values).
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConfigurationSymmetricAlgorithmProvider_MissingKey">
            <summary>
              Looks up a localized string similar to The Encryption key is missing, please add the following value to app.settings: &lt;add key=&quot;MicroLite.DbEncryptedString.EncryptionKey&quot; value=&quot;replace-with-your-encryption-key&quot; /&gt;.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConfigureExtensions_UsingLogger">
            <summary>
              Looks up a localized string similar to Using logger [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConfigureExtensions_UsingMappingConvention">
            <summary>
              Looks up a localized string similar to Using mapping convention [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConnectionManager_ArgumentsCountMismatch">
            <summary>
              Looks up a localized string similar to The number of parameters in the SQL statement and the number of specified parameter arguments should match. However [{0}] parameters used in the SQL statement and [{1}] parameter arguments were specified..
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConnectionManager_BeginTransactionWithIsolationLevel">
            <summary>
              Looks up a localized string similar to Beginning a new transaction with IsolationLevel.{0}.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConnectionManager_ClosingConnection">
            <summary>
              Looks up a localized string similar to Closing the database connection.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConnectionManager_CreatingCommand">
            <summary>
              Looks up a localized string similar to Creating a new IDbCommand for the managed connection.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConnectionManager_EnlistingInTransaction">
            <summary>
              Looks up a localized string similar to Enlisting in the current transaction.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConnectionManager_OpeningConnection">
            <summary>
              Looks up a localized string similar to Opening the database connection.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ConventionMappingConvention_Configuration">
            <summary>
              Looks up a localized string similar to The convention to be used is pluralize names [{0}], the table schema [{1}] and an identifier strategy of [{2}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.DbEncryptedStringTypeConverter_CipherTextInvalid">
            <summary>
              Looks up a localized string similar to The cipher text is invalid, it should contain 2 parts separated by an &apos;@&apos;.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.FluentConfiguration_ConnectionNotFound">
            <summary>
              Looks up a localized string similar to No connection was found in the app.config with the name [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.FluentConfiguration_CreatingSessionFactory">
            <summary>
              Looks up a localized string similar to Creating a session factory for connection named [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.FluentConfiguration_ReadingConnection">
            <summary>
              Looks up a localized string similar to Reading connection named [{0}] from app.config.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.IListener_IdentifierNotSetForDelete">
            <summary>
              Looks up a localized string similar to The object does not have an identifier value set so it cannot be delete.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.IListener_IdentifierNotSetForUpdate">
            <summary>
              Looks up a localized string similar to The object does not have an identifier value set so it cannot be updated.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.IListener_IdentifierSetForInsert">
            <summary>
              Looks up a localized string similar to The object already has an identifier value so it cannot be inserted.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.IListener_SettingIdentifierValue">
            <summary>
              Looks up a localized string similar to Setting the identifier value for an instance of the type [{0}] to [{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.IncludeScalar_MultipleColumns">
            <summary>
              Looks up a localized string similar to The scalar query should return a single row with a single column.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.IncludeSingle_SingleResultExpected">
            <summary>
              Looks up a localized string similar to There are multiple records returned in the results list, the single query should return a single row only.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectBuilder_CreatingInstance">
            <summary>
              Looks up a localized string similar to Creating a new instance of [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectBuilder_SettingPropertyValue">
            <summary>
              Looks up a localized string similar to Setting the property value of [{0}].[{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_ColumnNotMapped">
            <summary>
              Looks up a localized string similar to The column {0} is not mapped to a property on the {1} class.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_CreatingObjectInfo">
            <summary>
              Looks up a localized string similar to Creating the ObjectInfo for the type [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_GetPropertyValueForColumn">
            <summary>
              Looks up a localized string similar to Getting the value of [{0}].[{1}] for the [{2}] column.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_MappingColumnToProperty">
            <summary>
              Looks up a localized string similar to Mapping the property [{0}].[{1}] to the column [{2}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_MappingTypeToTable">
            <summary>
              Looks up a localized string similar to Mapping the type [{0}] to the table [{1}].[{2}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_RetrievingObjectInfo">
            <summary>
              Looks up a localized string similar to Retrieving the ObjectInfo for [{0}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_SettingPropertyValue">
            <summary>
              Looks up a localized string similar to Setting the property value of [{0}].[{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_TypeMismatch">
            <summary>
              Looks up a localized string similar to The type of the object {0} does not match the type for the ObjectInfo {1}.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_TypeMustBeClass">
            <summary>
              Looks up a localized string similar to The type [{0}] is not a class and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_TypeMustHaveDefaultConstructor">
            <summary>
              Looks up a localized string similar to The type [{0}] has no default (parameterless) constructor and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_TypeMustNotBeAbstract">
            <summary>
              Looks up a localized string similar to The type [{0}] is abstract and therefore cannot be used by the MicroLite ORM Framework.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.ObjectInfo_UnknownProperty">
            <summary>
              Looks up a localized string similar to Ignoring the [{1}] column value as the mapped type [{0}] does not have a mapped property with the column name [{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.PagingOptions_PagesMustBeAtleastOne">
            <summary>
              Looks up a localized string similar to The first page which can be requested is page 1.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.PagingOptions_ResultsPerPageMustBeAtLeast1">
            <summary>
              Looks up a localized string similar to There must be at least 1 result per page.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.PagingOptions_SkipMustBeZeroOrAbove">
            <summary>
              Looks up a localized string similar to It is not possible to skip less than 0 results.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.PagingOptions_TakeMustBeZeroOrAbove">
            <summary>
              Looks up a localized string similar to At least 1 result must be returned.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Session_Created">
            <summary>
              Looks up a localized string similar to Session created.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Session_Disposed">
            <summary>
              Looks up a localized string similar to Session disposed.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Session_PagingOptionsMustNotBeNone">
            <summary>
              Looks up a localized string similar to The paging options must contain a count and offset, use the PagingOptions.ForPage or PagingOptions.SkipTake methods to specify the values.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.SessionFactory_CreatingReadOnlySession">
            <summary>
              Looks up a localized string similar to Creating a new read only session for connection [{0}] using [{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.SessionFactory_CreatingSession">
            <summary>
              Looks up a localized string similar to Creating a new session for connection [{0}] using [{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.SqlDialect_StatementTypeNotSupported">
            <summary>
              Looks up a localized string similar to The sql dialect does not support the creation of an SqlQuery for the given statement type.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.SqlDialectFactory_DialectMustImplementISqlDialect">
            <summary>
              Looks up a localized string similar to The dialect type being added &apos;{0}&apos; does not implement ISqlDialect.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.SqlDialectFactory_DialectNameAlreadyUsed">
            <summary>
              Looks up a localized string similar to The dialect name &apos;{0}&apos; has already been added..
            </summary>
        </member>
        <member name="P:MicroLite.Messages.SqlDialectFactory_DialectNotSupported">
            <summary>
              Looks up a localized string similar to The sql dialect [{0}] is currently not supported by the MicroLite ORM framework.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.TableInfo_ColumnMappedMultipleTimes">
            <summary>
              Looks up a localized string similar to The column [{0}] has been mapped multiple times, this usually occurs if multiple properties have the same column name specified in the column attribute.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.TableInfo_NoIdentifierColumn">
            <summary>
              Looks up a localized string similar to No column has been mapped as the identifier for the table [{0}].[{1}].
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_Committed">
            <summary>
              Looks up a localized string similar to Transaction committed changes.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_Committing">
            <summary>
              Looks up a localized string similar to Transaction committing changes.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_Completed">
            <summary>
              Looks up a localized string similar to Transaction has been completed.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_Disposed">
            <summary>
              Looks up a localized string similar to Transaction disposed.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_DisposedUncommitted">
            <summary>
              Looks up a localized string similar to Transaction is being disposed with uncommitted changes.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_EnlistingCommand">
            <summary>
              Looks up a localized string similar to Command enlisted in transaction.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_RolledBack">
            <summary>
              Looks up a localized string similar to Transaction rolled back changes.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_RollingBack">
            <summary>
              Looks up a localized string similar to Transaction rolling back changes.
            </summary>
        </member>
        <member name="P:MicroLite.Messages.Transaction_RollingBackFailedCommit">
            <summary>
              Looks up a localized string similar to Transaction rolling back changes from failed commit.
            </summary>
        </member>
        <member name="T:MicroLite.PagingOptions">
            <summary>
            A class containing the count and offset for paged queries.
            </summary>
        </member>
        <member name="M:MicroLite.PagingOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.PagingOptions"/> struct.
            </summary>
            <param name="count">The count.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:MicroLite.PagingOptions.ForPage(System.Int32,System.Int32)">
            <summary>
            Gets the paging options for the specified page number.
            </summary>
            <param name="page">The page number.</param>
            <param name="resultsPerPage">The results per page.</param>
            <returns>The paging options for the specified page number.</returns>
        </member>
        <member name="M:MicroLite.PagingOptions.op_Inequality(MicroLite.PagingOptions,MicroLite.PagingOptions)">
            <summary>
            Checks whether two separate PagingOptions instances are not equal.
            </summary>
            <param name="pagingOptions1">The paging options to check.</param>
            <param name="pagingOptions2">The paging options to check against.</param>
            <returns><c>true</c> if the instances are not considered equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MicroLite.PagingOptions.op_Equality(MicroLite.PagingOptions,MicroLite.PagingOptions)">
            <summary>
            Checks whether two separate PagingOptions instances are equal.
            </summary>
            <param name="pagingOptions1">The paging options to check.</param>
            <param name="pagingOptions2">The paging options to check against.</param>
            <returns><c>true</c> if the instances are considered equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MicroLite.PagingOptions.SkipTake(System.Int32,System.Int32)">
            <summary>
            Gets the paging options for the specified skip and take numbers.
            </summary>
            <param name="skip">The number of records to skip.</param>
            <param name="take">The number of records to take.</param>
            <returns>The paging options for the specified skip and take numbers.</returns>
        </member>
        <member name="M:MicroLite.PagingOptions.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.PagingOptions.Equals(MicroLite.PagingOptions)">
            <summary>
            Determines whether the specified <see cref="T:MicroLite.PagingOptions"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:MicroLite.PagingOptions"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:MicroLite.PagingOptions"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.PagingOptions.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:MicroLite.PagingOptions.None">
            <summary>
            Gets the paging options for when no paging is required.
            </summary>
        </member>
        <member name="P:MicroLite.PagingOptions.Count">
            <summary>
            Gets the number of record to return.
            </summary>
        </member>
        <member name="P:MicroLite.PagingOptions.Offset">
            <summary>
            Gets the number of records to skip.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IAndOrOrderBy">
            <summary>
            The interface which specifies the and/or methods to extend the where clause in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IGroupBy">
            <summary>
            The interface which specifies the group by method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IGroupBy.GroupBy(System.String[])">
            <summary>
            Groups the results of the query by the specified columns.
            </summary>
            <param name="columns">The columns to group by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Query.IOrderBy">
            <summary>
            The interface which specifies the order by method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IToSqlQuery">
            <summary>
            The interface to end the fluent build syntax.
            </summary>
            <remarks>
            It's a bit of a verbose hack, need to see if I can use cast operators instead somehow...
            </remarks>
        </member>
        <member name="M:MicroLite.Query.IToSqlQuery.ToSqlQuery">
            <summary>
            Creates a <see cref="T:MicroLite.SqlQuery"/> from the values specified.
            </summary>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
        </member>
        <member name="M:MicroLite.Query.IOrderBy.OrderByAscending(System.String[])">
            <summary>
            Orders the results of the query by the specified columns in ascending order.
            </summary>
            <param name="columns">The columns to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IOrderBy.OrderByDescending(System.String[])">
            <summary>
            Orders the results of the query by the specified columns in descending order.
            </summary>
            <param name="columns">The columns to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IAndOrOrderBy.AndWhere(System.String)">
            <summary>
            Adds a column as an AND to the where clause of the query.
            </summary>
            <param name="columnName">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IAndOrOrderBy.AndWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an AND to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IAndOrOrderBy.OrWhere(System.String)">
            <summary>
            Adds a column as an OR to the where clause of the query.
            </summary>
            <param name="columnName">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IAndOrOrderBy.OrWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an OR to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Mapping.IdentifierAttribute">
            <summary>
            An attribute which can be applied to a property to specify that it maps to the row identifier (primary key)
            in the table and also defines the <see cref="P:MicroLite.Mapping.IdentifierAttribute.IdentifierStrategy"/> used to manage the identifier's value.
            </summary>
            <example>
            <code>
            [Column("CustomerId")]
            [Identifier(IdentifierStrategy.DbGenerated)]
            public int Id
            {
                get;
                set;
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Mapping.IdentifierAttribute.#ctor(MicroLite.Mapping.IdentifierStrategy)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.IdentifierAttribute"/> class.
            </summary>
            <param name="identifierStrategy">The identifier strategy used to manage the identifier's value.</param>
        </member>
        <member name="P:MicroLite.Mapping.IdentifierAttribute.IdentifierStrategy">
            <summary>
            Gets the identifier strategy used to manage the identifier's value.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.IdentifierStrategy">
            <summary>
            The supported types of strategy used to manage a row identifier.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Identity">
            <summary>
            The identifier value is generated by the database upon insert by an identity column in MsSql.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.DbGenerated">
            <summary>
            The identifier value is generated by the database upon insert (for example Identity in MsSQL or AutoIncrement in SQLite, MySQL or PostgreSQL).
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Assigned">
            <summary>
            The identifier value is assigned by user code prior to insert.
            </summary>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.Guid">
            <summary>
            The identifier is automatically assigned a new System.Guid as it's value prior to insert.
            </summary>
            <remarks>This uses the static method Guid.NewGuid() to generate the GUID.</remarks>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.GuidComb">
            <summary>
            The identifier is automatically assigned a new combed System.Guid as it's value prior to insert.
            </summary>
            <remarks>This uses custom code to ensure that the Guid is unique but also reduces index fragmentation in the database.</remarks>
        </member>
        <member name="F:MicroLite.Mapping.IdentifierStrategy.AutoIncrement">
            <summary>
            The identifier value is generated by the database upon insert by an auto increment column in SQLite.
            </summary>
        </member>
        <member name="T:MicroLite.Query.IFrom">
            <summary>
            The interface which specifies the from method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IFrom.From(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFrom.From(System.Type)">
            <summary>
            Specifies the type to perform the query against.
            </summary>
            <param name="forType">The type of object the query relates to.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <remarks>Results in all columns being named if the select list is 'SELECT *'.</remarks>
        </member>
        <member name="T:MicroLite.Query.IFunctionOrFrom">
            <summary>
            The interface which specifies the from method or function in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Average(System.String)">
            <summary>
            Selects the average value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Average(System.String,System.String)">
            <summary>
            Selects the average value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Count(System.String)">
            <summary>
            Selects the number of records which match the specified filter.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Count(System.String,System.String)">
            <summary>
            Selects the number of records which match the specified filter.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Max(System.String)">
            <summary>
            Selects the maximum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Max(System.String,System.String)">
            <summary>
            Selects the maximum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Min(System.String)">
            <summary>
            Selects the minimum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Min(System.String,System.String)">
            <summary>
            Selects the minimum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Sum(System.String)">
            <summary>
            Selects the sum of the values in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IFunctionOrFrom.Sum(System.String,System.String)">
            <summary>
            Selects the sum of the values in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Query.IHavingOrOrderBy">
            <summary>
            The interface which specifies the having method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IHavingOrOrderBy.Having(System.String,System.Object)">
            <summary>
            Specifies the having clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="value">The argument value.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Query.IWhereBetweenOrIn">
            <summary>
            The interface which specifies the where in method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IWhereBetweenOrIn.Between(System.Object,System.Object)">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="lower">The inclusive lower value.</param>
            <param name="upper">The inclusive upper value.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IWhereBetweenOrIn.In(System.Object[])">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="args">The arguments to filter the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IWhereBetweenOrIn.In(MicroLite.SqlQuery)">
            <summary>
            Uses the specified SqlQuery as a sub query to filter the column.
            </summary>
            <param name="subQuery">The sub query.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Query.IWhereOrOrderBy">
            <summary>
            The interface which specifies the where method in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IWhereOrOrderBy.Where(System.String)">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="columnName">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.IWhereOrOrderBy.Where(System.String,System.Object[])">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Query.IWithParameter">
            <summary>
            The interface which specifies a parameter and argument for a stored procedure in the fluent sql builder syntax.
            </summary>
        </member>
        <member name="M:MicroLite.Query.IWithParameter.WithParameter(System.String,System.Object)">
            <summary>
            Specifies that the stored procedure should be executed the specified parameter and argument.
            </summary>
            <param name="parameter">The parameter to be added.</param>
            <param name="arg">The argument value for the parameter.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="T:MicroLite.Logging.ILog">
            <summary>
            The interface for a framework independent logger.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.ILog.Debug(System.String)">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Debug(System.String,System.String[])">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String)">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes the message to the log as an error along with the exception that occurred.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Error(System.String,System.String[])">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String)">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes the message to the log as fatal along with the exception that occurred.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Fatal(System.String,System.String[])">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Info(System.String)">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Info(System.String,System.String[])">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Warn(System.String)">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="message">The message to be logged.</param>
        </member>
        <member name="M:MicroLite.Logging.ILog.Warn(System.String,System.String[])">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="T:MicroLite.Logging.LogExtensions">
            <summary>
            Extension methods for the <see cref="T:MicroLite.Logging.ILog"/> interface to simplify writing to the log since there is no
            guarantee that an <see cref="T:MicroLite.Logging.ILog"/> is in use.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogDebug(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as a debug statement.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogError(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as an error.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogError(MicroLite.Logging.ILog,System.String,System.Exception)">
            <summary>
            Writes the message to the log as an error along with the exception that occurred.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogFatal(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as fatal.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogFatal(MicroLite.Logging.ILog,System.String,System.Exception)">
            <summary>
            Writes the message to the log as fatal along with the exception that occurred.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogInfo(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as information.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="M:MicroLite.Logging.LogExtensions.TryLogWarn(MicroLite.Logging.ILog,System.String,System.String[])">
            <summary>
            Writes the message to the log as a warning.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="message">The message to be logged.</param>
            <param name="formatArgs">The format args.</param>
        </member>
        <member name="T:MicroLite.Logging.LogManager">
            <summary>
            A class which the MicroLite ORM framework can call to resolve an ILog implementation.
            </summary>
        </member>
        <member name="M:MicroLite.Logging.LogManager.GetCurrentClassLog">
            <summary>
            Gets the log for the current (calling) class.
            </summary>
            <returns>The <see cref="T:MicroLite.Logging.ILog"/> for the class which called the method.</returns>
        </member>
        <member name="P:MicroLite.Logging.LogManager.GetLogger">
            <summary>
            Gets or sets the function which can be called by MicroLite to resolve the <see cref="T:MicroLite.Logging.ILog"/> to use.
            </summary>
        </member>
        <member name="T:MicroLite.MicroLiteException">
            <summary>
            The base exception thrown by the MicroLite ORM framework.
            </summary>
            <remarks>
            This exception will be thrown for exceptions encountered by the MicroLite ORM framework
            or to wrap any exceptions thrown by .net framework classes to allow for consistent error handling.
            </remarks>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MicroLite.MicroLiteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.MicroLiteException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:MicroLite.PagedResult`1">
            <summary>
            A class which contains the result of a paged query.
            </summary>
            <typeparam name="T">The type of object the contained in the results.</typeparam>
        </member>
        <member name="M:MicroLite.PagedResult`1.#ctor(System.Int32,System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.PagedResult`1"/> class.
            </summary>
            <param name="page">The page number for the results.</param>
            <param name="results">The results in the page.</param>
            <param name="resultsPerPage">The number of results per page.</param>
            <param name="totalResults">The total number of results for the query.</param>
        </member>
        <member name="P:MicroLite.PagedResult`1.HasResults">
            <summary>
            Gets a value indicating whether this page contains any results.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.MoreResultsAvailable">
            <summary>
            Gets a value indicating whether there are more results available.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.Page">
            <summary>
            Gets the page number for the results.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.Results">
            <summary>
            Gets the results in the page.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.ResultsPerPage">
            <summary>
            Gets the number of results per page.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.TotalPages">
            <summary>
            Gets the total number of pages for the query.
            </summary>
        </member>
        <member name="P:MicroLite.PagedResult`1.TotalResults">
            <summary>
            Gets the total number of results for the query.
            </summary>
        </member>
        <member name="T:MicroLite.Query.SqlBuilder">
            <summary>
            A helper class for building an <see cref="T:MicroLite.SqlQuery"/>.
            </summary>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Execute(System.String)">
            <summary>
            Species the name of the procedure to be executed.
            </summary>
            <param name="procedure">The name of the stored procedure.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <remarks>If the stored procedure has no parameters, call .ToSqlQuery() otherwise add the parameters (see the WithParameter method).</remarks>
            <example>
            <code>
            var query = SqlBuilder.Execute("CustomersOver50").ToSqlQuery();
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Select(System.String[])">
             <summary>
             Creates a new query which selects the specified columns.
             </summary>
             <param name="columns">The columns to be included in the query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <example>
             Option 1, don't enter any column names, this is generally used if you want to just call a function such as Count.
             <code>
             var query = SqlBuilder.Select()...
             </code>
             </example>
             <example>
             Option 2, enter specific column names.
             <code>
             var query = SqlBuilder.Select("Name", "DoB")...
             </code>
             </example>
             <example>
             Option 3, enter * followed by a table name
             <code>
             var query = SqlBuilder.Select("*").From("Customers")...
            
             // SELECT * FROM Customers
             // will be generated
             </code>
             </example>
             <example>
             Option 4, enter * followed by a type in From, all mapped columns will be specified in the SQL.
             <code>
             var query = SqlBuilder.Select("*").From(typeof(Customer))...
            
             // SELECT CustomerId, Name, DoB FROM Customers
             // will be generated
             </code>
             </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.AndWhere(System.String)">
            <summary>
            Adds a column as an AND to the where clause of the query.
            </summary>
            <param name="columnName">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify a column to be used with the BETWEEN or IN keywords which is added to the query as an AND.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .AndWhere("DateRegistered")
                ...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.AndWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an AND to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Adds the an additional predicate to the query as an AND.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("FirstName = @p0", "John")
                .AndWhere("LastName = @p0", "Smith") // Each time, the parameter number relates to the individual method call.
                .ToSqlQuery();
            </code>
            Would generate SELECT {Columns} FROM Customers WHERE (FirstName = @p0) AND (LastName = @p1)
            @p0 would be John
            @p1 would be Smith
            </example>
            <example>
            Additionally, we could construct the query as follows:
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("FirstName = @p0 AND LastName = @p1", "John", "Smith")
                .ToSqlQuery();
            </code>
            Would generate SELECT {Columns} FROM Customers WHERE (FirstName = @p0 AND LastName = @p1)
            @p0 would be John
            @p1 would be Smith
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Average(System.String)">
            <summary>
            Selects the average value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the average order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Average("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT AVG(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Average(System.String,System.String)">
            <summary>
            Selects the average value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the average order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Average("Total", columnAlias: "AverageTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT AVG(Total) AS AverageTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Between(System.Object,System.Object)">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="lower">The inclusive lower value.</param>
            <param name="upper">The inclusive upper value.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being between the 2 specified values.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                .Between(new DateTime(2000, 1, 1), new DateTime(2009, 12, 31))
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (DateRegistered BETWEEN @p0 AND @p1)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Count(System.String)">
            <summary>
            Selects the number of records which match the specified filter.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the number of customers. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Count("CustomerId")
                .From(typeof(Customer))
                .ToSqlQuery();
            </code>
            Will generate SELECT COUNT(CustomerId) AS CustomerId FROM Customers
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Count(System.String,System.String)">
            <summary>
            Selects the number of records which match the specified filter.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the number of customers. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Count("CustomerId", columnAlias: "CustomerCount")
                .From(typeof(Customer))
                .ToSqlQuery();
            </code>
            Will generate SELECT COUNT(CustomerId) AS CustomerCount FROM Customers
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.From(System.String)">
            <summary>
            Specifies the table to perform the query against.
            </summary>
            <param name="table">The name of the table.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            <code>
            var query = SqlBuilder.Select("Col1", "Col2").From("Customers")... // Add remainder of query
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.From(System.Type)">
            <summary>
            Specifies the type to perform the query against.
            </summary>
            <param name="forType">The type of object the query relates to.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            If the select criteria is * then all mapped columns will be used in the select list instead, otherwise the specified columns will be used.
            <code>
            var query = SqlBuilder.Select("Col1", "Col2").From(typeof(Customer))... // Add remainder of query
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.GroupBy(System.String[])">
            <summary>
            Groups the results of the query by the specified columns.
            </summary>
            <param name="columns">The columns to group by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            <code>
            var sqlQuery = SqlBuilder
                .Select("CustomerId")
                .Max("Total")
                .From(typeof(Invoice))
                .GroupBy("CustomerId")
                .ToSqlQuery();
            </code>
            Will generate SELECT CustomerId, MAX(Total) AS Total FROM Invoices GROUP BY CustomerId
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Having(System.String,System.Object)">
            <summary>
            Specifies the having clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="value">The argument value.</param>
            <returns>
            The next step in the fluent sql builder.
            </returns>
            <example>
            <code>
            var sqlQuery = SqlBuilder
                .Select("CustomerId")
                .Max("Total")
                .From(typeof(Invoice))
                .GroupBy("CustomerId")
                .Having("MAX(Total) > @p0", 10000M)
                .ToSqlQuery();
            </code>
            Will generate SELECT CustomerId, MAX(Total) AS Total FROM Invoices GROUP BY CustomerId HAVING MAX(Total) > @p0
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.In(System.Object[])">
            <summary>
            Uses the specified arguments to filter the column.
            </summary>
            <param name="args">The arguments to filter the column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify that a column is filtered with the results being in the specified values.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("Column1")
                .In("X", "Y", "Z")
                .ToSqlQuery();
            </code>
            Will generate SELECT {Columns} FROM Customers WHERE (Column1 IN (@p0, @p1, @p2))
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.In(MicroLite.SqlQuery)">
             <summary>
             Uses the specified SqlQuery as a sub query to filter the column.
             </summary>
             <param name="subQuery">The sub query.</param>
             <returns>The next step in the fluent sql builder.</returns>
             <example>
             This method allows us to specify that a column is filtered with the results being in the specified values.
             <code>
             var customerQuery = SqlBuilder
                 .Select("CustomerId")
                 .From(typeof(Customer))
                 .Where("Age > @p0", 40)
                 .ToSqlQuery();
            
             var query = SqlBuilder
                 .Select("*")
                 .From(typeof(Invoice))
                 .Where("CustomerId")
                 .In(customerQuery)
                 .ToSqlQuery();
             </code>
             Will generate SELECT {Columns} FROM Invoices WHERE (CustomerId IN (SELECT CustomerId FROM Customers WHERE Age > @p0))
             </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Max(System.String)">
            <summary>
            Selects the maximum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the max order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Max("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MAX(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Max(System.String,System.String)">
            <summary>
            Selects the maximum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the max order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Max("Total", columnAlias: "MaxTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MAX(Total) AS MaxTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Min(System.String)">
            <summary>
            Selects the minimum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the min order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Min("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MIN(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Min(System.String,System.String)">
            <summary>
            Selects the minimum value in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the min order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Min("Total", columnAlias: "MinTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT MIN(Total) AS MinTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrderByAscending(System.String[])">
            <summary>
            Orders the results of the query by the specified columns in ascending order.
            </summary>
            <param name="columns">The columns to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .OrderByAscending("CustomerId")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers ORDER BY CustomerId ASC
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrderByDescending(System.String[])">
            <summary>
            Orders the results of the query by the specified columns in descending order.
            </summary>
            <param name="columns">The columns to order by.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .OrderByDescending("CustomerId")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers ORDER BY CustomerId DESC
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrWhere(System.String)">
            <summary>
            Adds a column as an OR to the where clause of the query.
            </summary>
            <param name="columnName">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.OrWhere(System.String,System.Object[])">
            <summary>
            Adds a predicate as an OR to the where clause of the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Adds the an additional predicate to the query as an OR.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .OrWhere("LastName = @p0", "Smithson") // Each time, the parameter number relates to the individual method call.
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0) OR (LastName = @p1)
            @p0 would be Smith
            @p1 would be Smithson
            </example>
            <example>
            Additionally, we could construct the query as follows:
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0 OR LastName = @p1", "Smith", "Smithson")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0 OR LastName = @p1)
            @p0 would be Smith
            @p1 would be Smithson
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Sum(System.String)">
            <summary>
            Selects the sum of the values in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the total order total for a customer. By default, the result will be aliased as the column name.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Sum("Total")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT SUM(Total) AS Total FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Sum(System.String,System.String)">
            <summary>
            Selects the sum of the values in the specified column.
            </summary>
            <param name="columnName">The column to query.</param>
            <param name="columnAlias">The alias in the result set for the calculated column.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            A simple query to find the total order total for a customer. We can specify a custom column alias if required.
            <code>
            var sqlQuery = SqlBuilder
                .Select()
                .Sum("Total", columnAlias: "SumTotal")
                .From(typeof(Invoice))
                .Where("CustomerId = @p0", 1022)
                .ToSqlQuery();
            </code>
            Will generate SELECT SUM(Total) AS SumTotal FROM Invoices WHERE (CustomerId = @p0)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.ToSqlQuery">
            <summary>
            Creates a <see cref="T:MicroLite.SqlQuery"/> from the values specified.
            </summary>
            <returns>The created <see cref="T:MicroLite.SqlQuery"/>.</returns>
            <remarks>This method is called to return an SqlQuery once query has been defined.</remarks>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Where(System.String)">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="columnName">The column name to use in the where clause.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            This method allows us to specify a column to be used with the BETWEEN or IN keywords.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("DateRegistered")
                ...
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.Where(System.String,System.Object[])">
            <summary>
            Specifies the where clause for the query.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="args">The args.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Adds the first predicate to the query.
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0", "Smith")
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0)
            </example>
            <example>
            You can refer to the same parameter multiple times
            <code>
            var query = SqlBuilder
                .Select("*")
                .From(typeof(Customer))
                .Where("LastName = @p0 OR @p0 IS NULL", lastName)
                .ToSqlQuery();
            </code>
            Would generate SELECT [Columns] FROM Customers WHERE (LastName = @p0 OR @p0 IS NULL)
            </example>
        </member>
        <member name="M:MicroLite.Query.SqlBuilder.WithParameter(System.String,System.Object)">
            <summary>
            Specifies that the stored procedure should be executed the specified parameter and argument.
            </summary>
            <param name="parameter">The parameter to be added.</param>
            <param name="arg">The argument value for the parameter.</param>
            <returns>The next step in the fluent sql builder.</returns>
            <example>
            Add each parameter separately, specifying the parameter name and value.
            <code>
            var sqlQuery = SqlBuilder
                .Execute("GetCustomerInvoices")
                .WithParameter("@CustomerId", 7633245)
                .WithParameter("@StartDate", DateTime.Today.AddMonths(-3))
                .WithParameter("@EndDate", DateTime.Today)
                .ToSqlQuery();
            </code>
            </example>
        </member>
        <member name="T:MicroLite.SqlQuery">
            <summary>
            A class which represents a parameterised SQL query.
            </summary>
        </member>
        <member name="M:MicroLite.SqlQuery.#ctor(System.String,System.Object[])">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.SqlQuery"/> class with the specified command text and parameter values.
            </summary>
            <param name="commandText">The SQL command text.</param>
            <param name="arguments">The parameter values for the query.</param>
        </member>
        <member name="M:MicroLite.SqlQuery.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.Equals(MicroLite.SqlQuery)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MicroLite.SqlQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MicroLite.SqlQuery.Arguments">
            <summary>
            Gets the parameter values of the SQL query.
            </summary>
        </member>
        <member name="P:MicroLite.SqlQuery.CommandText">
            <summary>
            Gets or sets the SQL statement execute against the data source.
            </summary>
        </member>
        <member name="P:MicroLite.SqlQuery.Timeout">
            <summary>
            Gets or sets the timeout in seconds for the query.
            </summary>
        </member>
        <member name="T:MicroLite.Mapping.TableAttribute">
            <summary>
            An attribute which can be applied to a class to specify the table name and database schema the table
            exists within.
            </summary>
            <example>
            <code>
            // Option 1 - Specify schema and table name.
            [Table("dbo", "Customers")]
            public class Customer
            {
               ...
            }
            </code>
            <code>
            // Option 2 - Specify table name only.
            [Table("Customers")]
            public class Customer
            {
               ...
            }
            </code>
            </example>
        </member>
        <member name="M:MicroLite.Mapping.TableAttribute.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.TableAttribute"/> class.
            </summary>
            <param name="name">The name of the table.</param>
        </member>
        <member name="M:MicroLite.Mapping.TableAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.Mapping.TableAttribute"/> class.
            </summary>
            <param name="schema">The database schema the table exists within (e.g. 'dbo').</param>
            <param name="name">The name of the table.</param>
        </member>
        <member name="P:MicroLite.Mapping.TableAttribute.Name">
            <summary>
            Gets the name of the table.
            </summary>
        </member>
        <member name="P:MicroLite.Mapping.TableAttribute.Schema">
            <summary>
            Gets the schema the table exists within.
            </summary>
        </member>
        <member name="T:MicroLite.SqlUtility">
            <summary>
            A utility class containing useful methods for manipulating Sql.
            </summary>
        </member>
        <member name="M:MicroLite.SqlUtility.GetFirstParameterPosition(System.String)">
            <summary>
            Gets the position of the first parameter in the specified command text.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The position of the first parameter in the command text or -1 if no parameters are found.</returns>
        </member>
        <member name="M:MicroLite.SqlUtility.GetParameterNames(System.String)">
            <summary>
            Gets the parameter names from the specified command text.
            </summary>
            <param name="commandText">The command text.</param>
            <returns>The parameter names in the command text.</returns>
        </member>
        <member name="M:MicroLite.SqlUtility.RenumberParameters(System.String,System.Int32)">
            <summary>
            Re-numbers the parameters in the SQL based upon the total number of arguments.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="totalArgumentCount">The total number of arguments.</param>
            <returns>The re-numbered SQL</returns>
        </member>
        <member name="T:MicroLite.TypeConverters.TypeConverterCollection">
            <summary>
            The class which contains the ITypeConverters used by the MicroLite ORM framework.
            </summary>
            <remarks>The collection acts in the same way as a stack, the last converter added is the first used if it handles the type.</remarks>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverterCollection.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:MicroLite.TypeConverters.TypeConverterCollection"/> class.
            </summary>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverterCollection.Add(MicroLite.TypeConverters.ITypeConverter)">
            <summary>
            Adds the specified type converter to the collection of type converters which can be used by MicroLite.
            </summary>
            <param name="typeConverter">The type converter to be added.</param>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:MicroLite.TypeConverters.TypeConverterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
    </members>
</doc>
