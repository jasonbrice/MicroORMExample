using System;
using System.Collections.Generic;
using System.ComponentModel;

using System.Text;
using System.Windows.Forms;
using MicroLite.Configuration;
using MicroLite;
using MicroLite.Mapping;

using MicroORM.MicroLite;

namespace MicroORMTest
{
    public partial class MicroLiteForm : Form
    {
        public MicroLiteForm()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {

            using (var session = GetFactory().OpenSession())
            {
                var query = new SqlQuery("SELECT * from foo");
                var foos = session.Fetch<foo>(query); // foos will be an IList<foo>
                foreach (foo a in foos)
                {
                    Console.WriteLine("{0} - {1}", a.Id, a.name);
                }
            }
        }

        private ISessionFactory GetFactory()
        {
            Configure.Extensions() // If used, load any logging extension first.
         .WithConventionBasedMapping(new ConventionMappingSettings
         {
             IdentifierStrategy = IdentifierStrategy.DbGenerated, // default is DbGenerated if not specified.
             UsePluralClassNameForTableName = false // default is true if not specified.
             
         });

            var sessionFactory = Configure
                .Fluently()
                .ForConnection(connectionName: "sqlite", sqlDialect: "MicroLite.Dialect.SQLiteDialect")
                .CreateSessionFactory();
            return sessionFactory;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            var foo = new foo();
            foo.name = "Insert Test";

            using (var session = GetFactory().OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    session.Insert(foo);
                    transaction.Commit();
                    // foo.Id will now be set to the value generated by the database when the record was inserted.
                }
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            using (var session = GetFactory().OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    var foo = session.Single<foo>(2);
                    foo.name = "Update test";
                    session.Update(foo);
                    transaction.Commit();
                }
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            bool deleted;
            foo foo = new foo();
            foo.Id = 2;

            using (var session = GetFactory().OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    deleted = session.Delete(foo);
                    transaction.Commit();
                }
            }

            if (!deleted)
            {
                // Log error
            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            DateTime start = System.DateTime.Now;
            
            using (var session = GetFactory().OpenSession())
            {
                using (var transaction = session.BeginTransaction())
                {
                    for (int i = 0; i < 10000; i++) {
                        var foo = new foo();
                        foo.name = "MicroLite Insert Test " + i;
                        session.Insert(foo);
                }
                    transaction.Commit();
                }
            }
            Console.WriteLine("Elapsed: " + (System.DateTime.Now - start).TotalMilliseconds);
        }

        private void button6_Click(object sender, EventArgs e)
        {
            DateTime start = System.DateTime.Now;

            Dictionary<int, string> dict = new Dictionary<int, string>();

            using (var session = GetFactory().OpenSession())
            {
                var query = new SqlQuery("SELECT * from foo");
                var foos = session.Fetch<foo>(query); // foos will be an IList<foo>
                foreach (foo a in foos)
                {
                   dict.Add(a.Id, a.name);
                }
            }
            Console.WriteLine("Elapsed: " + (System.DateTime.Now - start).TotalMilliseconds);
        }
    }
}
